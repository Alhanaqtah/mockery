// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// IfaceWithBuildTagInFilename is an autogenerated mock type for the IfaceWithBuildTagInFilename type
type IfaceWithBuildTagInFilename struct {
	mock.Mock
}

type IfaceWithBuildTagInFilename_Expecter struct {
	mock *mock.Mock
}

func (_m *IfaceWithBuildTagInFilename) EXPECT() *IfaceWithBuildTagInFilename_Expecter {
	return &IfaceWithBuildTagInFilename_Expecter{mock: &_m.Mock}
}

// Sprintf provides a mock function with given fields: format, a
func (_m *IfaceWithBuildTagInFilename) Sprintf(format string, a ...interface{}) string {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, a...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, ...interface{}) string); ok {
		r0 = rf(format, a...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IfaceWithBuildTagInFilename_Sprintf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sprintf'
type IfaceWithBuildTagInFilename_Sprintf_Call struct {
	*mock.Call
}

// Sprintf is a helper method to define mock.On call
//   - format string
//   - a ...interface{}
func (_e *IfaceWithBuildTagInFilename_Expecter) Sprintf(format interface{}, a ...interface{}) *IfaceWithBuildTagInFilename_Sprintf_Call {
	return &IfaceWithBuildTagInFilename_Sprintf_Call{Call: _e.mock.On("Sprintf",
		append([]interface{}{format}, a...)...)}
}

func (_c *IfaceWithBuildTagInFilename_Sprintf_Call) Run(run func(format string, a ...interface{})) *IfaceWithBuildTagInFilename_Sprintf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *IfaceWithBuildTagInFilename_Sprintf_Call) Return(_a0 string) *IfaceWithBuildTagInFilename_Sprintf_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IfaceWithBuildTagInFilename_Sprintf_Call) RunAndReturn(run func(string, ...interface{}) string) *IfaceWithBuildTagInFilename_Sprintf_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewIfaceWithBuildTagInFilename interface {
	mock.TestingT
	Cleanup(func())
}

// NewIfaceWithBuildTagInFilename creates a new instance of IfaceWithBuildTagInFilename. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIfaceWithBuildTagInFilename(t mockConstructorTestingTNewIfaceWithBuildTagInFilename) *IfaceWithBuildTagInFilename {
	mock := &IfaceWithBuildTagInFilename{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
